name: Deploy ArgoCD
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose the environment"
        required: true
        default: 'dev'
        options:
          - dev
          - stage
          - prod
    
permissions:
  id-token: write
  contents: read

jobs:
  deploy_argocd:
    name: Deploy ArgoCD to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ github.event.inputs.environment }}-eks-cluster

      - name: Get EKS Cluster ARN
        id: cluster_arn
        run: |
          CLUSTER_ARN=$(aws eks describe-cluster --name ${{ github.event.inputs.environment }}-eks-cluster --region ${{ vars.AWS_REGION }} --query "cluster.arn" --output text)
          echo "Cluster ARN: $CLUSTER_ARN"
          echo "::set-output name=arn::$CLUSTER_ARN"

      - name: Install ArgoCD using official method
        run: |
          kubectl get namespace argocd || kubectl create namespace argocd
          kubectl -n argocd apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  
      - name: Wait for ArgoCD to be ready
        run: |
          if kubectl get deployment argocd-server -n argocd; then
            kubectl rollout status deployment/argocd-server -n argocd
          else
            echo "ArgoCD server deployment not found. Skipping wait."
          fi
  
      - name: Get ArgoCD initial password
        id: argocd_password
        run: |
          if kubectl get secret argocd-initial-admin-secret -n argocd; then
            PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode)
            echo "::add-mask::$PASSWORD"
            echo "::set-output name=password::$PASSWORD"
          else
            echo "ArgoCD initial password secret not found."
            echo "::set-output name=password::"
          fi

      - name: Install ArgoCD CLI
        run: |
          if ! command -v argocd &> /dev/null; then
            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x /usr/local/bin/argocd
          else
            echo "ArgoCD CLI is already installed. Skipping installation."
          fi
  
      - name: Forward ArgoCD server port
        run: kubectl port-forward svc/argocd-server -n argocd 8080:443 &
    
      - name: Login to ArgoCD
        env:
          ARGOCD_PASSWORD: ${{ steps.argocd_password.outputs.password }}
        run: |
          if [ -n "$ARGOCD_PASSWORD" ]; then
            argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure --grpc-web
          else
            echo "ArgoCD login skipped due to missing password."
          fi

      - name: Register EKS Cluster with ArgoCD
        run: |
          if argocd cluster list | grep -q '${{ steps.cluster_arn.outputs.arn }}'; then
            echo "Cluster is already registered with ArgoCD."
          else
            argocd cluster add ${{ steps.cluster_arn.outputs.arn }}
          fi
  
      - name: Create Application 
        env:
          REPOSITORY_TOKEN_ACCESS: ${{ secrets.REPOSITORY_TOKEN_ACCESS }}
        run: |
          sed -i 's|REPO_URL_PLACEHOLDER|${{ secrets.REPOSITORY_TOKEN_ACCESS }}|g' kubernetes/application_argocd.yml

      - name: Apply Argo CD Application manifest
        run: |
          kubectl apply -f kubernetes/application_argocd.yml