name: Deploy ArgoCD
on:
  workflow_dispatch:
    
permissions:
  id-token: write
  contents: read

jobs:
  deploy_argocd:
    name: Deploy ArgoCD to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name dev-cluster
  
      - name: Install ArgoCD using Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm install argocd argo/argo-cd --namespace argocd --create-namespace 
  
      - name: Wait for ArgoCD to be ready
        run: kubectl rollout status deployment/argocd-server -n argocd
  
      - name: Get ArgoCD initial password
        id: argocd_password
        run: |
          PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode)
          echo "::add-mask::$PASSWORD"
          echo "::set-output name=password::$PASSWORD"

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
  
      - name: Forward ArgoCD server port
        run: kubectl port-forward svc/argocd-server -n argocd 8080:443 &
    
      - name: Login to ArgoCD
        env:
          ARGOCD_PASSWORD: ${{ steps.argocd_password.outputs.password }}
        run: |
          argocd login localhost:8080 --username admin --password "$ARGOCD_PASSWORD" --insecure --grpc-web

      - name: Register EKS Cluster with ArgoCD
        run: |
          argocd cluster add dev-cluster
  
      - name: Create ArgoCD Application (Optional)
        env:
          REPOSITORY_TOKEN_ACCESS: ${{ secrets.REPOSITORY_TOKEN_ACCESS }}
        run: |
          argocd app create nginx \
            --repo ${{ secrets.REPOSITORY_TOKEN_ACCESS }} \
            --path kubernetes/ \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy auto